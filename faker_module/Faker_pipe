# python3
import pandas as pd
from itertools import product
import yaml
# links to the codes
binpath = "/home/genouest/cnrs_umr6553/eburban/RIDGE/faker_module"

# general property
# data generation
nMultilocus=1

SIMULATED_MODEL = ["IM_2M_2N"] # only this four models have current migration


# informations from the config.yaml file
nameA = config['nameA']
nameB = config['nameB']
size_popA = config['size_popA']
size_popB = config['size_popB']
timeStamp = config['timeStamp']
nLoci = config['nLoci']
Nref = config['Nref']
mu = config['mu']
rho_over_theta = config['rho_over_theta']
L=config['locus_length']
param_file = config['param_file'] # contain data about Tsplit , Pbar, M
RIDGE_template = config['RIDGE_template']
n_sim_iteration =int(config['n_sim_iteration']) # number of fake dataset for each model
n=range(n_sim_iteration)
container_path=config['container_path']
##### get parameter from param_file###
param_space = pd.read_csv(param_file,sep='\t')
Pbar = param_space['Pbar'].dropna()
Tsplit = param_space['Tsplit'].dropna()
Mbasal = param_space['Mbasal'].dropna()

##### singularity parametrisation ####
Sc='singularity exec --bind {0},{1},{2} {2}'.format(binpath,timeStamp,container_path) # set the option of singularity launch 
#################################
wildcard_constraints:
    sim_model="|".join(SIMULATED_MODEL),
    n = "|".join([str(x) for x in n]),
    timeStamp=timeStamp,
    x = "|".join([str(i) for i in range(nLoci)])
################################ PIPELINE ###############
simdata_result = ['priorfile.txt','ABCstat_global.txt','ABCstat_locus.txt','priorfile_locus.txt']

rule targets: # edit at the end 
    input:
        locus_datafile = expand("{timeStamp}/locus_datafile", timeStamp=timeStamp) ,
        locus_datafile_locussp = expand("{timeStamp}/locus_datafile_locussp",timeStamp=timeStamp),
        resume=expand("{timeStamp}/resume.txt",timeStamp=timeStamp),
        config = expand('{timeStamp}/config.yaml',timeStamp=timeStamp),
        simdata_result_prior = expand('{timeStamp}/simdata/{sim_model}_{n}_Ts~{Tsplit}_Pb~{Pbar}_Mb~{Mbasal}/{simdata_result}',timeStamp=timeStamp,sim_model=SIMULATED_MODEL,n=n,Tsplit=Tsplit,Pbar=Pbar,Mbasal=Mbasal,simdata_result='priorfile.txt'),
        simdata_result_statglob = expand('{timeStamp}/simdata/{sim_model}_{n}_Ts~{Tsplit}_Pb~{Pbar}_Mb~{Mbasal}/{simdata_result}',timeStamp=timeStamp,sim_model=SIMULATED_MODEL,n=n,Tsplit=Tsplit,Pbar=Pbar,Mbasal=Mbasal,simdata_result='ABCstat_global.txt'),
        simdata_result_statloc = expand('{timeStamp}/simdata/{sim_model}_{n}_Ts~{Tsplit}_Pb~{Pbar}_Mb~{Mbasal}/{simdata_result}',timeStamp=timeStamp,sim_model=SIMULATED_MODEL,n=n,Tsplit=Tsplit,Pbar=Pbar,Mbasal=Mbasal,simdata_result='ABCstat_locus.txt'),
        simdata_result_prior_loc = expand('{timeStamp}/simdata/{sim_model}_{n}_Ts~{Tsplit}_Pb~{Pbar}_Mb~{Mbasal}/{simdata_result}',timeStamp=timeStamp,sim_model=SIMULATED_MODEL,n=n,Tsplit=Tsplit,Pbar=Pbar,Mbasal=Mbasal,simdata_result='priorfile_locus.txt')
    shell:
        """
        rm slurm*.out
        """
############################ generating global data ############################# DONE
rule generate_bpfile:
    output:
        locus_datafile = expand("{timeStamp}/locus_datafile",timeStamp=timeStamp),
        locus_datafile_locussp = expand("{timeStamp}/locus_datafile_locussp",timeStamp=timeStamp),
        nloci_file = expand("{timeStamp}/nLoci.txt",timeStamp=timeStamp),
        nref_file =expand("{timeStamp}/Nref.txt",timeStamp=timeStamp),
    shell:
        """
        {Sc}/python.sif python3 {binpath}/generate_bpfile.py nLoci={nLoci} mu={mu} Nref={Nref} locus_length={L} \
		nameA={nameA} nameB={nameB} size_popA={size_popA} size_popB={size_popB} rho_over_theta={rho_over_theta} \
		timeStamp={timeStamp}
		cp {output.locus_datafile} {timeStamp}/locus_datafile_locussp
        """ 

rule generate_global_data:
    input:
        locus_datafile = "{timeStamp}/locus_datafile",
        config_yaml = "{timeStamp}/config.yaml"
    output:
        "{timeStamp}/simdata/{sim_model}_{n}_Ts~{Tsplit}_Pb~{Pbar}_Mb~{Mbasal}/ABCstat_global.txt", 
        "{timeStamp}/simdata/{sim_model}_{n}_Ts~{Tsplit}_Pb~{Pbar}_Mb~{Mbasal}/ABCstat_locus.txt", 
        "{timeStamp}/simdata/{sim_model}_{n}_Ts~{Tsplit}_Pb~{Pbar}_Mb~{Mbasal}/priorfile.txt",
        "{timeStamp}/simdata/{sim_model}_{n}_Ts~{Tsplit}_Pb~{Pbar}_Mb~{Mbasal}/priorfile_locus.txt",
    threads: 4
    resources: 
        mem_mb=10000
    shell:
         """
        cd {timeStamp}/simdata/{wildcards.sim_model}_{wildcards.n}_Ts~{wildcards.Tsplit}_Pb~{wildcards.Pbar}_Mb~{wildcards.Mbasal}
        {Sc}/python.sif python3 {binpath}/submit_priorgen_faker.py model={wildcards.sim_model}\
             locus_datafile={input.locus_datafile} locus_write=True nMultilocus={nMultilocus}\
            global_write=True Pbarrier={wildcards.Pbar} Tsplit={wildcards.Tsplit} Mbasal={wildcards.Mbasal}\
            Nref={Nref} binpath={binpath}
        {Sc}/scrm_py.sif sh exec.sh 
        rm exec.sh
        """

######################## Generate Resume ###############
rule create_resume: # replace resume by a list of all model use. model = combination of dem model + sim params
    output:
        expand("{timeStamp}/resume.txt",timeStamp=timeStamp)
    run:
        comb = product(SIMULATED_MODEL,n,Tsplit,Pbar,Mbasal)
        with open(timeStamp + "/resume.txt","w") as o:
            for i in comb :
                o.write('{}_{}_Ts~{}_Pb~{}_Mb~{}'.format(*i) + '\t')

rule create_RIDGE_config:
	output:
		expand('{timeStamp}/config.yaml',timeStamp=timeStamp)
	run:
		with open(RIDGE_template,'r') as template:
			list_param = yaml.safe_load(template)
		list_param['timeStamp'] = timeStamp
		list_param['nameA'] = 'wild'
		list_param['nameB'] = 'dom'
		list_param['useSFS'] =  0
		list_param['config_yaml'] = '{0}/config.yaml'.format(timeStamp)
		list_param['mu'] = 3e-8
		list_param['N_max'] = 170000
		list_param['container_path'] = '/home/genouest/cnrs_umr6553/eburban/RIDGE/container'
		list_param['lightMode'] = False
		
		with open('{timeStamp}/config.yaml'.format(timeStamp=timeStamp),'w') as outfile:
			yaml.dump(list_param,outfile)		
